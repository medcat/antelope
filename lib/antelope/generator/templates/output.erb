Productions:
% constructor.productions.each do |production|
    <%= production.to_s(false) %>
% end

Original Productions:
% parser.productions.each do |k, v|
%  v.each do |prod|
  <%= k %> â†’ <%= prod[:items].join(" ") %>
    <%= prod[:block] %>
%  end
% end

Conflicts:
% conflictor.conflicts.each do |conflict|
  State <%= conflict.state.id %>:
    rules : <%= conflict.rules.map(&:id).join(", ") %>
    type  : <%= conflict.type %>
    tokens: {<%= conflict.token.to_a.join(", ") %>}
% end

Presidence:
  --- highest
% parser.presidence.each do |pr|
  <%= "%-8s" % pr.type %> <%= pr.level %>:
    {<%= pr.tokens.to_a.join(", ") %>}
% end
  --- lowest

Table:
% PP.pp(Hash[tableizer.table.each_with_index.to_a.map(&:reverse)], _erbout)

% PP.pp(tableizer.rules, _erbout)

% parser.states.each do |state|
State <%= state.id %>:
  rules:
%   state.rules.each do |rule|
    <%= rule %>
      {<%= rule.lookahead.to_a.join(", ") %>}
%   end

  transitions:
%   max = state.transitions.keys.map(&:length).max || 0
%   state.transitions.each do |on, to|
    <%= "%-#{max}s" % on %>: State <%= to.id %>
%   end

% end

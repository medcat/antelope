Productions:
    0/n0: $start(0) → expression(0:1) $
    1/n1: expression(13:19) → NUMBER
    2/l2: expression(13:19) → expression(0:1) "+" expression(10:16)
    3/l2: expression(13:19) → expression(0:1) "-" expression(11:17)
    4/l3: expression(13:19) → expression(0:1) "*" expression(12:18)
    5/l3: expression(13:19) → expression(0:1) "/" expression(13:19)
    6/n4: expression(13:19) → "(" expression(7:14) ")"
    7/n4: expression(13:19) → "(" $error ")"
    20/l2: expression(13:19) → expression(7:14) "+" expression(10:16)
    21/l2: expression(13:19) → expression(7:14) "-" expression(11:17)
    22/l3: expression(13:19) → expression(7:14) "*" expression(12:18)
    23/l3: expression(13:19) → expression(7:14) "/" expression(13:19)
    31/l2: expression(13:19) → expression(10:16) "+" expression(10:16)
    32/l2: expression(13:19) → expression(10:16) "-" expression(11:17)
    33/l3: expression(13:19) → expression(10:16) "*" expression(12:18)
    34/l3: expression(13:19) → expression(10:16) "/" expression(13:19)
    39/l2: expression(13:19) → expression(11:17) "+" expression(10:16)
    40/l2: expression(13:19) → expression(11:17) "-" expression(11:17)
    41/l3: expression(13:19) → expression(11:17) "*" expression(12:18)
    42/l3: expression(13:19) → expression(11:17) "/" expression(13:19)
    47/l2: expression(13:19) → expression(12:18) "+" expression(10:16)
    48/l2: expression(13:19) → expression(12:18) "-" expression(11:17)
    49/l3: expression(13:19) → expression(12:18) "*" expression(12:18)
    50/l3: expression(13:19) → expression(12:18) "/" expression(13:19)
    55/l2: expression(13:19) → expression(13:19) "+" expression(10:16)
    56/l2: expression(13:19) → expression(13:19) "-" expression(11:17)
    57/l3: expression(13:19) → expression(13:19) "*" expression(12:18)
    58/l3: expression(13:19) → expression(13:19) "/" expression(13:19)

Original Productions:
  expression → NUMBER
    { |a| a[1]        }
  expression → expression "+" expression
    { |a, _, b| a + b }
  expression → expression "-" expression
    { |a, _, b| a - b }
  expression → expression "*" expression
    { |a, _, b| a * b }
  expression → expression "/" expression
    { |a, _, b| a / b }
  expression → "(" expression ")"
    { |_, a, _| a     }
  expression → "(" $error ")"
    
  $start → expression $
    

Conflicts:
  State 16:
    rules : 68
    type  : shift_reduce
    tokens: {"+", "-", "*", "/", ")", $}
  State 17:
    rules : 74
    type  : shift_reduce
    tokens: {"+", "-", "*", "/", ")", $}
  State 18:
    rules : 80
    type  : shift_reduce
    tokens: {"+", "-", "*", "/", ")", $}
  State 19:
    rules : 86
    type  : shift_reduce
    tokens: {"+", "-", "*", "/", ")", $}

Presidence:
  --- highest
  nonassoc 4:
    {LPAREN, RPAREN}
  left     3:
    {MULTIPLY, DIVIDE}
  left     2:
    {ADD, SUBTRACT}
  nonassoc 1:
    {_}
  nonassoc 0:
    {$}
  --- lowest

Table:
{0=>{:expression=>[:state, 1], :NUMBER=>[:state, 2], :LPAREN=>[:state, 7]},
 1=>
  {:"$"=>[:state, 9],
   :ADD=>[:state, 10],
   :SUBTRACT=>[:state, 11],
   :MULTIPLY=>[:state, 12],
   :DIVIDE=>[:state, 13]},
 2=>
  {:ADD=>[:reduce, 1],
   :SUBTRACT=>[:reduce, 1],
   :MULTIPLY=>[:reduce, 1],
   :DIVIDE=>[:reduce, 1],
   :RPAREN=>[:reduce, 1],
   :"$"=>[:reduce, 1]},
 3=>{:ADD=>[:state, 10]},
 4=>{:SUBTRACT=>[:state, 11]},
 5=>{:MULTIPLY=>[:state, 12]},
 6=>{:DIVIDE=>[:state, 13]},
 7=>
  {:expression=>[:state, 14],
   :NUMBER=>[:state, 2],
   :LPAREN=>[:state, 7],
   :$error=>[:state, 15]},
 8=>{:$error=>[:state, 15]},
 9=>{:"$"=>[:accept, 0]},
 10=>{:expression=>[:state, 16], :NUMBER=>[:state, 2], :LPAREN=>[:state, 7]},
 11=>{:expression=>[:state, 17], :NUMBER=>[:state, 2], :LPAREN=>[:state, 7]},
 12=>{:expression=>[:state, 18], :NUMBER=>[:state, 2], :LPAREN=>[:state, 7]},
 13=>{:expression=>[:state, 19], :NUMBER=>[:state, 2], :LPAREN=>[:state, 7]},
 14=>
  {:"$"=>[:state, 9],
   :ADD=>[:state, 10],
   :SUBTRACT=>[:state, 11],
   :MULTIPLY=>[:state, 12],
   :DIVIDE=>[:state, 13],
   :RPAREN=>[:state, 20]},
 15=>{:RPAREN=>[:state, 21]},
 16=>
  {:"$"=>[:reduce, 2],
   :ADD=>[:reduce, 2],
   :SUBTRACT=>[:reduce, 2],
   :MULTIPLY=>[:state, 12],
   :DIVIDE=>[:state, 13],
   :RPAREN=>[:reduce, 2]},
 17=>
  {:"$"=>[:reduce, 3],
   :ADD=>[:reduce, 3],
   :SUBTRACT=>[:reduce, 3],
   :MULTIPLY=>[:state, 12],
   :DIVIDE=>[:state, 13],
   :RPAREN=>[:reduce, 3]},
 18=>
  {:"$"=>[:reduce, 4],
   :ADD=>[:reduce, 4],
   :SUBTRACT=>[:reduce, 4],
   :MULTIPLY=>[:reduce, 4],
   :DIVIDE=>[:reduce, 4],
   :RPAREN=>[:reduce, 4]},
 19=>
  {:"$"=>[:reduce, 5],
   :ADD=>[:reduce, 5],
   :SUBTRACT=>[:reduce, 5],
   :MULTIPLY=>[:reduce, 5],
   :DIVIDE=>[:reduce, 5],
   :RPAREN=>[:reduce, 5]},
 20=>
  {:ADD=>[:reduce, 6],
   :SUBTRACT=>[:reduce, 6],
   :MULTIPLY=>[:reduce, 6],
   :DIVIDE=>[:reduce, 6],
   :RPAREN=>[:reduce, 6],
   :"$"=>[:reduce, 6]},
 21=>
  {:ADD=>[:reduce, 7],
   :SUBTRACT=>[:reduce, 7],
   :MULTIPLY=>[:reduce, 7],
   :DIVIDE=>[:reduce, 7],
   :RPAREN=>[:reduce, 7],
   :"$"=>[:reduce, 7]}}

[#<Antelope::Generation::Recognizer::Rule id=0 left=$start(0) right=[expression(0:1) $] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=1 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=2 left=expression(13:19) right=[expression(0:1) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=3 left=expression(13:19) right=[expression(0:1) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=4 left=expression(13:19) right=[expression(0:1) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=5 left=expression(13:19) right=[expression(0:1) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=6 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=7 left=expression(13:19) right=["(" $error ")"] position=0>,
 nil,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=13 left=expression(13:19) right=[NUMBER] position=1>,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=18 left=expression(13:19) right=["(" expression ")"] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=19 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=20 left=expression(13:19) right=[expression(7:14) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=21 left=expression(13:19) right=[expression(7:14) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=22 left=expression(13:19) right=[expression(7:14) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=23 left=expression(13:19) right=[expression(7:14) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=24 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=25 left=expression(13:19) right=["(" $error ")"] position=0>,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=27 left=expression(13:19) right=["(" $error ")"] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=28 left=$start(0) right=[expression $] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=29 left=expression(13:19) right=[expression "+" expression] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=30 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=31 left=expression(13:19) right=[expression(10:16) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=32 left=expression(13:19) right=[expression(10:16) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=33 left=expression(13:19) right=[expression(10:16) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=34 left=expression(13:19) right=[expression(10:16) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=35 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=36 left=expression(13:19) right=["(" $error ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=37 left=expression(13:19) right=[expression "-" expression] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=38 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=39 left=expression(13:19) right=[expression(11:17) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=40 left=expression(13:19) right=[expression(11:17) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=41 left=expression(13:19) right=[expression(11:17) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=42 left=expression(13:19) right=[expression(11:17) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=43 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=44 left=expression(13:19) right=["(" $error ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=45 left=expression(13:19) right=[expression "*" expression] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=46 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=47 left=expression(13:19) right=[expression(12:18) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=48 left=expression(13:19) right=[expression(12:18) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=49 left=expression(13:19) right=[expression(12:18) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=50 left=expression(13:19) right=[expression(12:18) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=51 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=52 left=expression(13:19) right=["(" $error ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=53 left=expression(13:19) right=[expression "/" expression] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=54 left=expression(13:19) right=[NUMBER] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=55 left=expression(13:19) right=[expression(13:19) "+" expression(10:16)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=56 left=expression(13:19) right=[expression(13:19) "-" expression(11:17)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=57 left=expression(13:19) right=[expression(13:19) "*" expression(12:18)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=58 left=expression(13:19) right=[expression(13:19) "/" expression(13:19)] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=59 left=expression(13:19) right=["(" expression(7:14) ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=60 left=expression(13:19) right=["(" $error ")"] position=0>,
 #<Antelope::Generation::Recognizer::Rule id=61 left=expression(13:19) right=["(" expression ")"] position=2>,
 nil,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=67 left=expression(13:19) right=["(" $error ")"] position=2>,
 #<Antelope::Generation::Recognizer::Rule id=68 left=expression(13:19) right=[expression "+" expression] position=3>,
 nil,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=74 left=expression(13:19) right=[expression "-" expression] position=3>,
 nil,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=80 left=expression(13:19) right=[expression "*" expression] position=3>,
 nil,
 nil,
 nil,
 nil,
 nil,
 #<Antelope::Generation::Recognizer::Rule id=86 left=expression(13:19) right=[expression "/" expression] position=3>,
 #<Antelope::Generation::Recognizer::Rule id=87 left=$start(0) right=[expression $] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=88 left=expression(13:19) right=[expression "+" expression] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=89 left=expression(13:19) right=[expression "-" expression] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=90 left=expression(13:19) right=[expression "*" expression] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=91 left=expression(13:19) right=[expression "/" expression] position=1>,
 #<Antelope::Generation::Recognizer::Rule id=92 left=expression(13:19) right=["(" expression ")"] position=3>,
 #<Antelope::Generation::Recognizer::Rule id=93 left=expression(13:19) right=["(" $error ")"] position=3>]

State 0:
  rules:
    0/n0: $start(0) →  • expression(0:1) $
      {}
    1/n1: expression(13:19) →  • NUMBER
      {}
    2/l2: expression(13:19) →  • expression(0:1) "+" expression(10:16)
      {}
    3/l2: expression(13:19) →  • expression(0:1) "-" expression(11:17)
      {}
    4/l3: expression(13:19) →  • expression(0:1) "*" expression(12:18)
      {}
    5/l3: expression(13:19) →  • expression(0:1) "/" expression(13:19)
      {}
    6/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    7/n4: expression(13:19) →  • "(" $error ")"
      {}

  transitions:
    expression: State 1
    NUMBER    : State 2
    LPAREN    : State 7

State 1:
  rules:
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13

State 2:
  rules:
    13/n1: expression(13:19) → NUMBER • 
      {"+", "-", "*", "/", ")", $}

  transitions:

State 3:
  rules:
    88/l2: expression(13:19) → expression • "+" expression
      {}

  transitions:
    ADD: State 10

State 4:
  rules:
    89/l2: expression(13:19) → expression • "-" expression
      {}

  transitions:
    SUBTRACT: State 11

State 5:
  rules:
    90/l3: expression(13:19) → expression • "*" expression
      {}

  transitions:
    MULTIPLY: State 12

State 6:
  rules:
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    DIVIDE: State 13

State 7:
  rules:
    18/n4: expression(13:19) → "(" • expression ")"
      {}
    19/n1: expression(13:19) →  • NUMBER
      {}
    20/l2: expression(13:19) →  • expression(7:14) "+" expression(10:16)
      {}
    21/l2: expression(13:19) →  • expression(7:14) "-" expression(11:17)
      {}
    22/l3: expression(13:19) →  • expression(7:14) "*" expression(12:18)
      {}
    23/l3: expression(13:19) →  • expression(7:14) "/" expression(13:19)
      {}
    24/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    25/n4: expression(13:19) →  • "(" $error ")"
      {}
    27/n4: expression(13:19) → "(" • $error ")"
      {}

  transitions:
    expression: State 14
    NUMBER    : State 2
    LPAREN    : State 7
    $error    : State 15

State 8:
  rules:
    27/n4: expression(13:19) → "(" • $error ")"
      {}

  transitions:
    $error: State 15

State 9:
  rules:
    28/n0: $start(0) → expression $ • 
      {}

  transitions:

State 10:
  rules:
    29/l2: expression(13:19) → expression "+" • expression
      {}
    30/n1: expression(13:19) →  • NUMBER
      {}
    31/l2: expression(13:19) →  • expression(10:16) "+" expression(10:16)
      {}
    32/l2: expression(13:19) →  • expression(10:16) "-" expression(11:17)
      {}
    33/l3: expression(13:19) →  • expression(10:16) "*" expression(12:18)
      {}
    34/l3: expression(13:19) →  • expression(10:16) "/" expression(13:19)
      {}
    35/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    36/n4: expression(13:19) →  • "(" $error ")"
      {}

  transitions:
    expression: State 16
    NUMBER    : State 2
    LPAREN    : State 7

State 11:
  rules:
    37/l2: expression(13:19) → expression "-" • expression
      {}
    38/n1: expression(13:19) →  • NUMBER
      {}
    39/l2: expression(13:19) →  • expression(11:17) "+" expression(10:16)
      {}
    40/l2: expression(13:19) →  • expression(11:17) "-" expression(11:17)
      {}
    41/l3: expression(13:19) →  • expression(11:17) "*" expression(12:18)
      {}
    42/l3: expression(13:19) →  • expression(11:17) "/" expression(13:19)
      {}
    43/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    44/n4: expression(13:19) →  • "(" $error ")"
      {}

  transitions:
    expression: State 17
    NUMBER    : State 2
    LPAREN    : State 7

State 12:
  rules:
    45/l3: expression(13:19) → expression "*" • expression
      {}
    46/n1: expression(13:19) →  • NUMBER
      {}
    47/l2: expression(13:19) →  • expression(12:18) "+" expression(10:16)
      {}
    48/l2: expression(13:19) →  • expression(12:18) "-" expression(11:17)
      {}
    49/l3: expression(13:19) →  • expression(12:18) "*" expression(12:18)
      {}
    50/l3: expression(13:19) →  • expression(12:18) "/" expression(13:19)
      {}
    51/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    52/n4: expression(13:19) →  • "(" $error ")"
      {}

  transitions:
    expression: State 18
    NUMBER    : State 2
    LPAREN    : State 7

State 13:
  rules:
    53/l3: expression(13:19) → expression "/" • expression
      {}
    54/n1: expression(13:19) →  • NUMBER
      {}
    55/l2: expression(13:19) →  • expression(13:19) "+" expression(10:16)
      {}
    56/l2: expression(13:19) →  • expression(13:19) "-" expression(11:17)
      {}
    57/l3: expression(13:19) →  • expression(13:19) "*" expression(12:18)
      {}
    58/l3: expression(13:19) →  • expression(13:19) "/" expression(13:19)
      {}
    59/n4: expression(13:19) →  • "(" expression(7:14) ")"
      {}
    60/n4: expression(13:19) →  • "(" $error ")"
      {}

  transitions:
    expression: State 19
    NUMBER    : State 2
    LPAREN    : State 7

State 14:
  rules:
    61/n4: expression(13:19) → "(" expression • ")"
      {}
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13
    RPAREN  : State 20

State 15:
  rules:
    67/n4: expression(13:19) → "(" $error • ")"
      {}

  transitions:
    RPAREN: State 21

State 16:
  rules:
    68/l2: expression(13:19) → expression "+" expression • 
      {"+", "-", "*", "/", ")", $}
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13

State 17:
  rules:
    74/l2: expression(13:19) → expression "-" expression • 
      {"+", "-", "*", "/", ")", $}
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13

State 18:
  rules:
    80/l3: expression(13:19) → expression "*" expression • 
      {"+", "-", "*", "/", ")", $}
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13

State 19:
  rules:
    86/l3: expression(13:19) → expression "/" expression • 
      {"+", "-", "*", "/", ")", $}
    87/n0: $start(0) → expression • $
      {}
    88/l2: expression(13:19) → expression • "+" expression
      {}
    89/l2: expression(13:19) → expression • "-" expression
      {}
    90/l3: expression(13:19) → expression • "*" expression
      {}
    91/l3: expression(13:19) → expression • "/" expression
      {}

  transitions:
    $       : State 9
    ADD     : State 10
    SUBTRACT: State 11
    MULTIPLY: State 12
    DIVIDE  : State 13

State 20:
  rules:
    92/n4: expression(13:19) → "(" expression ")" • 
      {"+", "-", "*", "/", ")", $}

  transitions:

State 21:
  rules:
    93/n4: expression(13:19) → "(" $error ")" • 
      {"+", "-", "*", "/", ")", $}

  transitions:

